x <- factor(city$City)
x
x <- factor(city$Province)
class(x)
x
table(x)
city$Province <- x
class(city)
class(city$Province)
tapply(city$Income, city$Province, mean)
?tapply(vector, index, function)
?tapply
class(state.division)
#######tidyverse######
install.packages("tidyverse")
library(tidyverse)
gc()
tdata <- mtcars[1:10,1:3]
View(tdata)
gather(tdata)
table4a
pivot_longer(table4a,cols = 2:3,names_to = "year", values_to = "cases")
pivot_longer(table4a,cols = 2:3)
x <- pivot_longer(table4a,cols = 2:3,names_to = "year", values_to = "cases")
pivot_wider(x, names_from = "year", values_from = "cases")
table2
pivot_wider(table2,names_from = "type", values_from = "count")
who
WHO
WHO
WHO
who
view(who)
billboard
pivot_longer(billboard, cols = "^wk", names_to = "week", values_to = "sales")
pivot_longer(billboard, cols = "wk1:16", names_to = "week", values_to = "sales")
pivot_longer(billboard, cols = "wk*", names_to = "week", values_to = "sales")
view(billboard)
dim(billboard)
pivot_longer(billboard, cols = billboard[,4:79], names_to = "week", values_to = "sales")
pivot_longer(billboard, cols = "wk1", names_to = "week", values_to = "sales")
pivot_longer(billboard, cols = starts_with("wk"), names_to = "week", values_to = "sales")
pivot_longer(billboard, cols = starts_with("wk"), names_to = "week", values_to = "sales", values_drop_na = T)
#######dpylr######
#筛选、排序、去重复、抽样、分组计算、集合计算
library(dplyr)
dplyr::filter(mtcars,
mpg>21)
dplyr::filter(mtcars, mpg>21, cyl==6)
dplyr::arrange(mtcars, mpg)
#管道 %>%
mtcars %>% dplyr::filter(mpg>20) %>% dplyr::arrange(cyl)
#管道 %>%
mtcars %>% dplyr::filter(mpg>20) %>% dplyr::arrange(-cyl)
#管道 %>%
mtcars %>% dplyr::filter(mpg>20) %>% dplyr::arrange(mpg,-cyl)
#管道 %>%
mtcars %>% dplyr::filter(mpg>20) %>% dplyr::arrange(-mpg,-cyl)
dplyr::select(iris, starts_with("Sep"))
dplyr::sample_n(mtcars, 10)
mtcars %>% dplyr::sample_n(10)
mtcars %>% dplyr::mutate(mpg10=mpg*10)
?mutate
x <- read.xlsx("Rdata/2015.xlsx", rowNames = T)
View(x)
?summarise
x %>% group_by(Province) %>% summarise(sum(Income))
x %>% group_by(Province) %>% summarise(sum(Income)) %>% dplyr::arrange()
x %>% group_by(Province) %>% summarise(num=sum(Income)) %>% dplyr::arrange(num)
x %>% group_by(Province) %>% summarise(num=sum(Income)) %>% dplyr::arrange(-num)
)
x %>% group_by(Province) %>% summarise(num=sum(Income)) %>% dplyr::arrange(-num)
x %>% group_by(Province) %>% summarise(num = sum(Income)) %>% dplyr::arrange(-num)
x %>% group_by(Province) %>% summarise(Income_all = sum(Income)) %>% dplyr::arrange(-num)
rlang::last_error()
x %>% group_by(Province) %>% summarise(Income_all = sum(Income)) %>% dplyr::arrange(-Income_all)
a <- data_frame(x1=c("A","B","C"), x2=1:3)
b <- data.frame(x1=c("A","B","C"), x2=c(T,F,T))
a
b
full_join(a,b)
a <- data_frame(x1=c("A","B","C"), x2=1:3)
b <- data.frame(x1=c("A","B","D"), x2=c(T,F,T))
full_join(a,b)
b <- data.frame(x1=c("A","B","D"), x3=c(T,F,T))
full_join(a,b)
anti_join(a,b, by="x1")
anti_join(a,b)
anti_join(b,a)
inner_join(a,b)
left_join(a,b)
left_join(b,a)
right_join(a,b)
first <- slice(mtcars, 1:20)
second <- slice(mtcars, 20:40)
first <- slice(mtcars, 1:20)
second <- slice(mtcars, 10:30)
intersect(first,second)
setdiff(first,second)
setdiff(second,first)
union_all(first,second)
union_all(first,second) %>% dim()
union(first, second) %>% dim()
install.packages("vcd")
library(vcd)
data("Arthritis")
force(Arthritis)
View(Arthritis)
class(Arthritis)
dim(Arthritis)
table(Arthritis)
table(Arthritis$Improved)
table(Arthritis$Treatment)
table(Arthritis$Treatment, Arthritis$Sex)
class(Arthritis$Treatment)
library(tidyverse)
Arthritis %>%  dplyr::select("Some")
?select
class(Arthritis$Improved)
Arthritis$Improved %>%  dplyr::select("Some")
Arthritis$Improved %>%  dplyr::filter(Improved>some)
Arthritis$Improved == "Some"
Arthritis[Arthritis$Improved == "Some",]
Arthritis$Improved[Arthritis$Improved == "Some"]
Arthritis$Improved[Arthritis$Improved == "Some"] <- "Marked"
Arthritis
table(Arthritis$Improved)
table(Arthritis$Treatment, Arthritis$Improved)
levels(Arthritis$Improved)
levels(Arthritis$Improved) <- c("None", "Marked", "Marked")
table(Arthritis$Improved)
table(Arthritis$Treatment, Arthritis$Improved)
chisq.test(y)
y <- table(Arthritis$Treatment, Arthritis$Improved)
chisq.test(y)
fisher.test(y)
z <- table(Arthritis$Sex, Arthritis$Improved)
chisq.test(z)
fisher.test(z)
z <- table(Arthritis$Improved, Arthritis$Sex)
chisq.test(z)
fisher.test(z)
z
z <- table(Arthritis$Improved, Arthritis$Sex)
chisq.test(z)
#######独立t检验########
#连续数据，且符合正态分布，否则使用wilcox
#比如基因表达量的不同
x <- read_csv("Rdata/heatmap.csv", row.names(1))
View(x)
#######独立t检验########
#连续数据，且符合正态分布，否则使用wilcox
#比如基因表达量的不同
x <- read_csv("Rdata/heatmap.csv", row.names=1)
View(x)
#######独立t检验########
#连续数据，且符合正态分布，否则使用wilcox
#比如基因表达量的不同
x <- read_csv("Rdata/heatmap.csv")
View(x)
#######独立t检验########
#连续数据，且符合正态分布，否则使用wilcox
#比如基因表达量的不同
x <- read_csv("Rdata/heatmap.csv", row.names=1)
?read.csv
#######独立t检验########
#连续数据，且符合正态分布，否则使用wilcox
#比如基因表达量的不同
x <- read_csv("Rdata/heatmap.csv", row.names(1))
View(x)
#######独立t检验########
#连续数据，且符合正态分布，否则使用wilcox
#比如基因表达量的不同
x <- read_csv("Rdata/heatmap.csv", row.names = 1)
#######独立t检验########
#连续数据，且符合正态分布，否则使用wilcox
#比如基因表达量的不同
x <- read_csv("Rdata/heatmap.csv",row.names = 1)
#######独立t检验########
#连续数据，且符合正态分布，否则使用wilcox
#比如基因表达量的不同
x <- read_csv("Rdata/heatmap.csv",row.names = 1)
#######独立t检验########
#连续数据，且符合正态分布，否则使用wilcox
#比如基因表达量的不同
x <- read.csv("Rdata/heatmap.csv",row.names = 1)
t.test(x[1,1:5],x[1,6:10])
？apply()
？apply
apply(x, 1, function(i){
t.test(i[1:5], i[6:10])$p.value
})
######配对t检验######
apply(x, 1, function(i){
t.test(i[1:5], i[6:10], paired =T)$p.value
})
t.test(i[1:5], i[11:15], paired =T)$p.value
apply(x, 1, function(i){
t.test(i[1:5], i[6:10])$p.value
})     #在r中要尽量避免循环
t.test(x[1:5], x[11:15], paired =T)$p.value
?t.test
x[11,15]
x[,11:15]
t.test(x[1:5], x[11:15], paired =T)$p.value
######配对t检验######
apply(x, 1, function(x){
t.test(x[1:5], x[11:15], paired =T)$p.value
})
######配对t检验######
apply(x, 1, function(i){
t.test(i[1:5], i[11:15], paired =T)$p.value
})
######wilcox test######
#如果数据不符合正态分布那么就使用这个检测
wilcox.test(as.numeric(x[1,1:5]),as.numeric(x[1,6:10]))
apply(x, 1, function(i){wilcox.test(i[1:5], i[6:10])})
apply(x, 1, function(i){wilcox.test(i[1:5], i[6:10])$p.value})
wilcox.test(i[1:5], i[11:15], paired =T)$p.value
apply(x, 1, function(i){
wilcox.test(i[1:5], i[11:15], paired =T)$p.value
})
######配对t检验######
#用来检测同一对象在实验前后是否有差异，是否符合同一个正态分布，假设也是没有差异
p <- apply(x, 1, function(i){
t.test(i[1:5], i[11:15], paired =T)$p.value
})
#####多重检验矫正#######
#q value
p.adjust(p)
#####多重检验矫正#######
#q value
p.adjust(p, p.adjust.methods="BH")
#####多重检验矫正#######
#q value
p.adjust(p, p.adjust.methods=BH)
?p.adjust.methods
###########
ToothGrowth
###########
x <- ToothGrowth
dim(x)
apply(x, 1, function(i){
t.test(i[1:10],i[31:40])
})
apply(x, 1, function(i){
t.test(i[1:10,1],i[31:40,1])
})
apply(x, 2, function(i){
t.test(i[1:10,1],i[31:40,1])
})
apply(x, 2, function(i){
t.test(i[1:10],i[31:40])
})
apply(x, 2, function(i){
t.test(i[1:10],i[31:40])
})
###########
x <- ToothGrowth
dim(x)
apply(x, 2, function(i){
t.test(i[1:10],i[31:40])
})
t.test(x[1:10,1],x[31:40,1])
pivot_wider(x, names_from = dose)
pivot_wider(x, names_from = dose, values_from = len)
pivot_wider(x, names_from = len, values_from = dose)
pivot_wider(x, names_from = supp, values_from = len)
pivot_wider(x, names_from = supp, values_from = len) %>% view()
pivot_wider(x, names_from = dose, values_from = len) %>% view()
y <- pivot_wider(x, names_from = dose, values_from = len)
View(y)
class(y[1,2])
y[1,2]
t.test(y[1,2],y[2,2])
y[1,2]
y[2,2]
t.test(x[1:10,1],x[31:40,1])
t.test(x[11:20,1],x[41:50,1])
x$len %>% dplyr::select(x$dose0.5)
x$len %>% dplyr::select(x$dose==0.5)
dplyr::select(x$dose==0.5)
dplyr::select(x,x$dose==0.5)
dplyr::select(x$dose,0.5)
?select
x$len %>% dplyr::filter(x$dose==0.5)
x %>% dplyr::filter(x$dose==0.5)
t.test(x$supp=="VC" & x$dose=="0.5", x$supp=="OJ" & x$dose=="0.5")
t.test(x[1:10,1],x[31:40,1])
t.test(x[x$supp=="VC" & x$dose=="0.5"], x[x$supp=="OJ" & x$dose=="0.5"])
t.test(x[x$supp=="VC" & x$dose=="0.5",], x[x$supp=="OJ" & x$dose=="0.5",])
t.test(x[x$supp=="VC" & x$dose=="0.5",]$len, x[x$supp=="OJ" & x$dose=="0.5",]$len)
x[x$supp=="VC" & x$dose=="0.5",]
t.test(x[x$supp=="VC" & x$dose=="1",]$len, x[x$supp=="OJ" & x$dose=="1",]$len)
x %>% dplyr::filter(x$dose==0.5 & x$supp=="VC")
t.test(x[x$supp=="VC" & x$dose=="2",]$len, x[x$supp=="OJ" & x$dose=="2",]$len)
dplyr::filter(x, x$dose==0.5 & x$supp=="VC")
dplyr::filter(x, x$dose==0.5 & x$supp=="VC")$len
t.test(dplyr::filter(x, x$dose==0.5 & x$supp=="VC")$len, dplyr::filter(x, x$dose==0.5 & x$supp=="OJ")$len)
t.test(x[x$supp=="VC" & x$dose=="0.5",]$len, x[x$supp=="OJ" & x$dose=="0.5",]$len)
########相关性########
#正相关、负相关
#相关系数-1 0 1
#pearson spearman kendall
x <- state.x77
cor(state.x77[,5],state.x77[,2])
cor(state.x77[,5],state.x77[,1])
cor(state.x77[,5],state.x77[,3])
cor(state.x77[,5],state.x77[,3], method = "spearman")
cor(state.x77[,5],state.x77[,3])
round(cor(state.x77), digits = 2)
cor.test(state.x77)
cor.test(state.x77[,5],state.x77[,3])
cor(state.x77[,5],state.x77[,3])
cor.test(state.x77[,5],state.x77[,4])
？t.test
?t.test
cor.test(state.x77[,5],state.x77[,4])
#######统计建模#######
#回归 regression 数据挖掘
#数据建模不是使用的等号方程 而是使用的相关性
women
plot(women$height,women$weight)
plot(women$height,women$weight, type = L)
plot(women$height,women$weight, type = line)
plot(women$height,women$weight, type = "line")
fit <- lm(weight ~ height, data = women)
fit
summary(fit)
plot(fit)
newdata <- data.frame(height-c(73,60))
predict(object = fit, newdata )
predict(object = fit, newdata = newdata )
newdata <- data.frame(height-c(73,60))
newdata <- data.frame(height-c(73,60))
newdata <- data.frame(height-c(73,60))
predict(object = fit, newdata = newdata )
newdata <- data.frame(height-c(73,60))
newdata <- data.frame(height=c(73,60))
predict(object = fit, newdata = newdata )
View(newdata)
state.x77 <- as.data.frame(state.x77)
colnames(state.x77)
fit <- lm(state.x77$Murder ~ state.x77$Population+state.x77$Income+state.x77$Illiteracy+state.x77$`Life Exp`+state.x77$`HS Grad`+state.x77$Frost+state.x77$Area, data = state.x77)
fit
fit %>% summary()
fit2 <- lm(state.x77$Murder ~ state.x77$Population+state.x77$`Life Exp`, data = state.x77)
fit2 %>% summary()
######建模估算基因组大小和基因多少的关系######
read.csv("Rdata/prok_representative.csv")
######建模估算基因组大小和基因多少的关系######
x <- rxead.csv("Rdata/prok_representative.csv")
######建模估算基因组大小和基因多少的关系######
x <- read.csv("Rdata/prok_representative.csv")
######建模估算基因组大小和基因多少的关系######
x <- read.csv("Rdata/prok_representative.csv")
colnames(x)
plot(x$Size,x$Genes)
fit <- lm(x$Genes ~ x$Size, data = x)
summary(fit)
plot(x$Size,x$Genes, pch = 16)
plot(x$Size,x$Genes, pch = 16, cex=0.8, xlab = "Genome Size", ylab = "Genes Numbers", main = "Genomesize with Gene Numbers") +
abline(fit, col="blue")
plot(x$Size,x$Genes, pch = 16, cex=0.8, xlab = "Genome Size", ylab = "Genes Numbers", main = "Genomesize with Gene Numbers") +
abline(fit, col="blue") +
text(2.5, 1000, label = "y=843.7x+286.6 \n R2=0.9676")
plot(x$Size,x$Genes, pch = 16, cex=0.8, xlab = "Genome Size", ylab = "Genes Numbers", main = "Genomesize with Gene Numbers") +
abline(fit, col="blue") +
text(3.5, 1000, label = "y=843.7x+286.6 \n R2=0.9676")
plot(x$Size,x$Genes, pch = 16, cex=0.8, xlab = "Genome Size", ylab = "Genes Numbers", main = "Genomesize with Gene Numbers") +
abline(fit, col="blue") +
text(3.5, 10000, label = "y=843.7x+286.6 \n R2=0.9676")
x[x$Size>15]
x[x$Size>15,]
x[x$Size<5 & x$Genes>6000,]
plot(x$Size,x$Genes, pch = 16, cex=0.8, xlab = "Genome Size", ylab = "Genes Numbers", main = "Genomesize with Gene Numbers") +
abline(fit, col="blue") +
text(3.5, 10000, label = "y=843.7x+286.6 \n R2=0.9676") +
text(15, 3000, label = "Corynebacterium striatum") +
text(3.5, 5000, label = "Candidatus Burkholderia kirkii UZHbot1")
gc()
plot(x$Size,x$Genes, pch = 16, cex=0.8, xlab = "Genome Size", ylab = "Genes Numbers", main = "Genomesize with Gene Numbers") +
abline(fit, col="blue") +
text(3.5, 10000, label = "y=843.7x+286.6 \n R2=0.9676") +
text(10, 3000, label = "Corynebacterium striatum") +
text(3.5, 5000, label = "Candidatus Burkholderia \n kirkii UZHbot1")
#######购物篮分析 关联规则######
install.packages("arules")
library(arules)
data("Groceries")
View(Groceries)
class(Groceries)
Groceries@itemInfo
#transaction 数据类型
inspect(Groceries)
###建模
fit <- apriori(Groceries)
###建模
fit <- apriori(Groceries, parameter = list(support=0.05, confidence=0.5))
###建模
fit <- apriori(Groceries, parameter = list(support=0.01, confidence=0.5))
summary(fit)
inspect(fit)
load("/Volumes/ZEK/R_projects/Meta/audioscrobbler.rda")
#######歌单########
class(audioscrobbler)
dim(audioscrobbler)
fit <- apriori(audioscrobbler, parameter = list(support=0.01, confidence=0.5))
gc()
gc()
fit <- apriori(audioscrobbler, parameter = new("APparameter", support=0.0645))
gc()
inspect(fit)
gc()
gc()
########机器学习预测乳腺癌##########
x <- read.csv("Rdata/breast.csv", row.names = 1)
x <- x[,-1]
View(x)
dplyr::filter(x, class=2)
dplyr::filter(x, class==2)
dplyr::filter(x, class==2)  <- "Good"
dplyr::filter(x, class==2) %>% class()
class(dplyr::filter(x, class==2))
dplyr::filter(x, class==2)[,10]
dplyr::filter(x, class==2)[,10] <- "Good"
?dplyr::arrange
as.factor(x$class)
factor(x$class)
factor(x$class) <- c("Good", "Bad")
levels(x$class) <- c("Good", "Bad")
as.factor(x$class)
levels(x$class)
########机器学习预测乳腺癌##########
x <- read.csv("Rdata/breast.csv", row.names = 1)
x <- x[,-1]
levels(x$class)
as.factor(x$class)
levels(x$class)
levels(x)
class(x$class)
x <- as.factor(x$class)
levels(x)
levels(x) <- c("Good", "Bad")
########机器学习预测乳腺癌##########
x <- read.csv("Rdata/breast.csv", row.names = 1)
x <- x[,-1]
x <- as.factor(x$class)
########机器学习预测乳腺癌##########
x <- read.csv("Rdata/breast.csv", row.names = 1)
x <- x[,-1]
x$class <- as.factor(x$class)
levels(x) <- c("Good", "Bad")
levels(x$class) <- c("Good", "Bad")
########机器学习预测乳腺癌##########
x <- read.csv("Rdata/breast.csv", row.names = 1)
x <- x[,-1]
x$class <- as.factor(x$class)
levels(x$class) <- c("Good", "Bad")
########机器学习预测乳腺癌##########
x <- read.csv("Rdata/breast.csv", row.names = 1)
x <- x[,-1]
x$class <- as.factor(x$class)
levels(x$class) <- c("Benign", "Nalignant")
gc()
nrow(x)
train <- sample(699, 489)
set.seed(1234)
train <- sample(699, 489)
x.train <- x[train,]
x.validate <- x[-train,]
nrow(x.train)
nrow(x.validate)
table(x.validate)
gc()
table(x.train)
gc()
getwd()
########机器学习预测乳腺癌##########
x <- read.csv("Rdata/breast.csv", row.names = 1)
x <- x[,-1]
x$class <- as.factor(x$class)
levels(x$class) <- c("Benign", "Nalignant")
set.seed(1234)
train <- sample(699, 489)
x.train <- x[train,]
x.validate <- x[-train,]
table(x.validate$class)
table(x.train$class)
#建模 逻辑回归 分类
fit <- glm(class~., data = x.train, family = binomial())
summary(fit)
coef(fit)
#验证模型
pred <- predict(fit, x.validate, type = "response")
pred
pred>0.5
factor(pred>0.5, levels = c(F,T), labels = ("Benign","Nalignant"))
factor(pred>0.5, levels = c(F,T), labels = ("Benign","Nalignant"))
factor(pred>0.5, levels = c(F,T), labels = ("Benign","Nalignant"))
factor(pred>0.5, levels = c(F,T), labels = c("Benign","Nalignant"))
result <- factor(pred>0.5, levels = c(F,T), labels = c("Benign","Nalignant"))
table(x.validate$class)
table(result)
#生成混淆矩阵
table(x.validate$class, result)
#####R小技巧#####
Sys.getlocale()
Sys.setenv(LANG="Chinese")
Sys.setenv()
#shift + enter 换行
sum
